name: Security and Dependency Scan

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      node-version:
        description: 'Node version to use'
        required: false
        type: string
        default: '18'
      enable-python-scan:
        description: 'Enable Python security scanning'
        required: false
        type: boolean
        default: true
      enable-node-scan:
        description: 'Enable Node.js security scanning'
        required: false
        type: boolean
        default: true
      enable-docker-scan:
        description: 'Enable Docker security scanning'
        required: false
        type: boolean
        default: false

jobs:
  python-security:
    if: inputs.enable-python-scan
    runs-on: ubuntu-latest
    name: Python Security Scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      
      - name: Check for requirements files
        id: check-files
        run: |
          req_files=""
          
          # First, check if Dockerfile exists and parse it for requirements
          if [ -f "Dockerfile" ]; then
            echo "Found Dockerfile, parsing for pip install commands..."
            
            # Extract all pip install -r commands from Dockerfile
            # This captures the actual files being used in the container
            dockerfile_reqs=$(grep -E "^\s*(RUN\s+)?pip\s+install\s+.*-r\s+" Dockerfile | \
                             sed -E 's/.*-r\s+([^ ]+).*/\1/' | \
                             grep -E "\.(txt|frozen\.txt)$" | \
                             sort -u)
            
            # Check if we're in a multi-stage build and prioritize production
            if grep -q "FROM.*AS production" Dockerfile; then
              echo "Multi-stage Dockerfile detected, focusing on production stage..."
              # Get requirements from base stage (if exists) and production stage
              base_reqs=$(sed -n '/^FROM.*AS base/,/^FROM/p' Dockerfile | \
                         grep -E "pip\s+install\s+.*-r\s+" | \
                         sed -E 's/.*-r\s+([^ ]+).*/\1/' | \
                         grep -E "\.(txt|frozen\.txt)$")
              prod_reqs=$(sed -n '/^FROM.*AS production/,/^FROM/p' Dockerfile | \
                         grep -E "pip\s+install\s+.*-r\s+" | \
                         sed -E 's/.*-r\s+([^ ]+).*/\1/' | \
                         grep -E "\.(txt|frozen\.txt)$")
              
              # Combine base and production requirements
              dockerfile_reqs=$(echo -e "$base_reqs\n$prod_reqs" | sort -u | tr '\n' ' ')
            fi
            
            # Verify the files actually exist
            for req in $dockerfile_reqs; do
              if [ -f "$req" ]; then
                req_files="$req_files $req"
                echo "Found requirements file from Dockerfile: $req"
              fi
            done
          fi
          
          # Fallback: if no Dockerfile or no requirements found in it, use traditional detection
          if [ -z "$req_files" ]; then
            echo "No Dockerfile or no requirements found in Dockerfile, falling back to file detection..."
            
            # Check for root requirements.txt
            if [ -f "requirements.txt" ]; then
              req_files="requirements.txt"
              echo "Found root requirements.txt"
            # Check for requirements/ directory structure
            elif [ -d "requirements" ]; then
              # First look for frozen files (they have exact versions)
              for pattern in "base.frozen.txt" "production.frozen.txt" "requirements.frozen.txt"; do
                if [ -f "requirements/$pattern" ]; then
                  req_files="$req_files requirements/$pattern"
                  echo "Found requirements/$pattern"
                fi
              done
              
              # If no frozen files found, look for regular .txt files
              if [ -z "$req_files" ]; then
                for pattern in "base.txt" "production.txt" "requirements.txt"; do
                  if [ -f "requirements/$pattern" ]; then
                    req_files="$req_files requirements/$pattern"
                    echo "Found requirements/$pattern"
                  fi
                done
              fi
            fi
          fi
          
          # Trim leading/trailing spaces and set outputs
          req_files=$(echo "$req_files" | xargs)
          
          if [ -n "$req_files" ]; then
            echo "has_requirements=true" >> $GITHUB_OUTPUT
            echo "requirements_files=$req_files" >> $GITHUB_OUTPUT
            echo "Will scan the following requirements files: $req_files"
          else
            echo "has_requirements=false" >> $GITHUB_OUTPUT
            echo "No requirements files found"
          fi
          
          if [ -f "Pipfile" ]; then
            echo "has_pipfile=true" >> $GITHUB_OUTPUT
          else
            echo "has_pipfile=false" >> $GITHUB_OUTPUT
          fi
          if [ -f "poetry.lock" ]; then
            echo "has_poetry=true" >> $GITHUB_OUTPUT
          else
            echo "has_poetry=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Install pip-audit
        run: |
          pip install pip-audit
      
      - name: Run pip-audit on requirements files
        if: steps.check-files.outputs.has_requirements == 'true'
        run: |
          echo "## 🔒 Python Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "### Checking requirements files for vulnerabilities..." >> $GITHUB_STEP_SUMMARY
          echo "Requirements files: ${{ steps.check-files.outputs.requirements_files }}"
          echo "Requirements files found: ${{ steps.check-files.outputs.requirements_files }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run pip-audit on all found requirements files and capture output
          echo '```' >> $GITHUB_STEP_SUMMARY
          audit_output=""
          for req_file in ${{ steps.check-files.outputs.requirements_files }}; do
            echo "Scanning $req_file..."
            echo "=== Results for $req_file ===" >> $GITHUB_STEP_SUMMARY
            req_output=$(pip-audit -r "$req_file" --desc --progress-spinner off 2>&1 | sed 's/\x1b\[[0-9;]*m//g' || true)
            if echo "$req_output" | grep -q "No known vulnerabilities found"; then
              echo "✅ No vulnerabilities found in $req_file" >> $GITHUB_STEP_SUMMARY
            else
              echo "$req_output" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          echo '```' >> $GITHUB_STEP_SUMMARY

          # Generate combined JSON report
          pip-audit -r ${{ steps.check-files.outputs.requirements_files }} --format json > pip-audit-report.json || true
      
      
      - name: Run Bandit security linter
        if: always()
        run: |
          pip install bandit[toml]
          echo "### 🔍 Static Security Analysis (Bandit)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # Run bandit and capture output (--no-color disables ANSI color codes)
          bandit_output=$(bandit -r . -ll -i --no-color 2>&1 || true)
          if echo "$bandit_output" | grep -q "No issues identified"; then
            echo "✅ No security issues found by Bandit" >> $GITHUB_STEP_SUMMARY
          elif echo "$bandit_output" | grep -q "Total lines of code"; then
            echo "$bandit_output" >> $GITHUB_STEP_SUMMARY
          else
            echo "Bandit scan completed. Check the detailed HTML report in artifacts." >> $GITHUB_STEP_SUMMARY
          fi

          echo '```' >> $GITHUB_STEP_SUMMARY

          # Generate HTML report for artifacts
          bandit -r . -f html -o bandit-report.html || true
      
      - name: Run OSV-Scanner
        if: steps.check-files.outputs.has_requirements == 'true'
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            --format=sarif
            --recursive
            --output=osv-results.sarif
            .

      - name: Upload OSV results to GitHub Security
        if: steps.check-files.outputs.has_requirements == 'true'
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: osv-results.sarif
      
      - name: Upload Python security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            pip-audit-report.json
            bandit-report.html
            safety-report.json
          retention-days: 30

  node-security:
    if: inputs.enable-node-scan
    runs-on: ubuntu-latest
    name: Node.js Security Scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for Node.js files
        id: check-files
        run: |
          if [ -f "package.json" ]; then
            echo "has_package_json=true" >> $GITHUB_OUTPUT
          else
            echo "has_package_json=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up Node.js
        if: steps.check-files.outputs.has_package_json == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
      
      - name: Run npm audit
        if: steps.check-files.outputs.has_package_json == 'true'
        run: |
          echo "## 🔒 Node.js Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "### NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          npm audit --json > npm-audit-report.json || true
          npm audit || true
      
      - name: Check for outdated packages
        if: steps.check-files.outputs.has_package_json == 'true'
        run: |
          echo "### 📦 Outdated Node.js Packages" >> $GITHUB_STEP_SUMMARY
          npm outdated || true
      
      - name: Run better-npm-audit
        if: steps.check-files.outputs.has_package_json == 'true'
        continue-on-error: true
        run: |
          npx better-npm-audit audit
      
      - name: Upload Node.js security reports
        if: steps.check-files.outputs.has_package_json == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: node-security-reports
          path: |
            npm-audit-report.json
          retention-days: 30

  docker-security:
    if: inputs.enable-docker-scan
    runs-on: ubuntu-latest
    name: Docker Security Scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for Dockerfile
        id: check-files
        run: |
          if [ -f "Dockerfile" ]; then
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has_dockerfile=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Hadolint Dockerfile Linter
        if: steps.check-files.outputs.has_dockerfile == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: json
          output-file: hadolint-report.json
          no-fail: true
      
      - name: Run Trivy vulnerability scanner
        if: steps.check-files.outputs.has_dockerfile == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Docker security reports
        if: steps.check-files.outputs.has_dockerfile == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-reports
          path: |
            hadolint-report.json
            trivy-results.sarif
          retention-days: 30

  dependency-review:
    runs-on: ubuntu-latest
    name: License and Dependency Review
    steps:
      - uses: actions/checkout@v4
      
      - name: Check licenses
        continue-on-error: true
        run: |
          echo "## 📜 License Check" >> $GITHUB_STEP_SUMMARY
          echo "### Checking for restrictive licenses..." >> $GITHUB_STEP_SUMMARY
          
          # Check Python licenses if requirements files exist
          if [ -f "requirements.txt" ] || [ -d "requirements" ]; then
            pip install pip-licenses
            echo "#### Python Packages Licenses:" >> $GITHUB_STEP_SUMMARY
            
            # Install packages from requirements files first
            if [ -f "requirements.txt" ]; then
              echo "Installing from requirements.txt..." >> $GITHUB_STEP_SUMMARY
              pip install -r requirements.txt || true
            elif [ -d "requirements" ]; then
              echo "Installing from requirements directory..." >> $GITHUB_STEP_SUMMARY
              for req_file in requirements/base.txt requirements/production.txt requirements/development.txt; do
                if [ -f "$req_file" ]; then
                  echo "Installing from $req_file..." >> $GITHUB_STEP_SUMMARY
                  pip install -r "$req_file" || true
                fi
              done
            fi
            
            echo "Generating license report..." >> $GITHUB_STEP_SUMMARY
            pip-licenses --format=markdown >> $GITHUB_STEP_SUMMARY || true
          else
            echo "No Python requirements files found." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Node licenses if package.json exists  
          if [ -f "package.json" ]; then
            echo "#### Node.js Packages Licenses:" >> $GITHUB_STEP_SUMMARY
            npx license-checker --summary >> $GITHUB_STEP_SUMMARY || true
          else
            echo "No package.json found." >> $GITHUB_STEP_SUMMARY
          fi

  security-summary:
    needs: [python-security, node-security, docker-security, dependency-review]
    if: always()
    runs-on: ubuntu-latest
    name: Security Summary
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate Security Summary
        run: |
          echo "## 🔐 Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security scans have been completed. Check individual job results for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Reports Generated:" >> $GITHUB_STEP_SUMMARY
          echo "- Python security reports (if applicable)" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js security reports (if applicable)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker security reports (if applicable)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 Recommendations:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review and update outdated packages regularly" >> $GITHUB_STEP_SUMMARY
          echo "2. Address critical and high severity vulnerabilities immediately" >> $GITHUB_STEP_SUMMARY
          echo "3. Consider using lock files (requirements.txt, package-lock.json) for reproducible builds" >> $GITHUB_STEP_SUMMARY
          echo "4. Run these scans on every PR and scheduled weekly basis" >> $GITHUB_STEP_SUMMARY