name: Claude Code Handler
on:
  workflow_call:
    secrets:
      ANTHROPIC_API_KEY:
        required: true

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    steps:
      # For PR comments, get the correct branch information using GitHub API
      - name: Get PR branch info
        if: github.event.issue.pull_request
        id: pr-info
        run: |
          pr_number=$(echo "${{ github.event.issue.number }}")
          pr_data=$(gh api repos/${{ github.repository }}/pulls/$pr_number)
          head_ref=$(echo "$pr_data" | jq -r '.head.ref')
          head_sha=$(echo "$pr_data" | jq -r '.head.sha')
          echo "head_ref=$head_ref" >> $GITHUB_OUTPUT
          echo "head_sha=$head_sha" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use PR branch if this is a PR comment, otherwise use default
          ref: ${{ steps.pr-info.outputs.head_sha || github.sha }}
          # Fetch full history for better git operations
          fetch-depth: 0
      
      # Run Claude Code action
      - uses: anthropics/claude-code-action@beta
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          allowed_tools: |
            # Core file operations
            Edit
            View
            Create
            GlobTool
            GrepTool
            
            # Git essentials
            Bash(git diff)
            Bash(git status)
            Bash(git add)
            Bash(git commit -m)
            
            # Build/test (adjust for your stack)
            Bash(npm install)
            Bash(npm run build)
            Bash(npm run test)
            Bash(npm run lint)
            
            # Python execution and package management
            Bash(python)
            Bash(python3)
            Bash(pip install)
            Bash(pip list)
            Bash(pip freeze)
            
            # Python testing
            Bash(pytest)
            Bash(python -m pytest)
            Bash(python -m unittest)
            
            # Python code quality
            Bash(black)
            Bash(ruff)
            Bash(flake8)
            Bash(mypy)
            Bash(pylint)
            
            # Python environment
            Bash(python -m venv)
            Bash(source)
            Bash(which python)
            
            # Django commands (if applicable)
            Bash(python manage.py)
            Bash(django-admin)
            
            # General build tools
            Bash(make)
            Bash(docker)
            Bash(docker-compose)
            
            # API testing tools
            Bash(curl)
            Bash(wget)
            
            # Basic diagnostics
            Bash(ls -la)
            Bash(cat)